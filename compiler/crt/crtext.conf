##begin config
version 1.0
basename CrtExt
libbasetypeextern struct Library
libbasetype struct CrtExtIntBase
options peropenerbase
##end config

##begin cdef
#include <unistd.h>
#include <stdio.h>
#include <signal.h>
#include <time.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <utime.h>
#include <dirent.h>
#include <sys/mount.h>
#include <sys/utsname.h>
#include <regex.h>
#include <setjmp.h>
#include <sys/resource.h>
#include <termios.h>
##end cdef

##begin stubprivate
##end stubprivate

##begin cdefprivate
#include "__crtext_intbase.h"
##end cdefprivate

##begin startup
##end startup

##begin functionlist
void __assert(const char * expr, const char * file, unsigned int line)
int rand(void)
void srand(unsigned int seed)
void *calloc(size_t count, size_t size)
void free(void *memory)
void *malloc(size_t size)
void *malloc_align(size_t size, size_t alignment)
void *realloc(void *oldmem, size_t newsize)
void *realloc_nocopy(void *oldmem, size_t newsize)
char *strdup(const char *)
clock_t clock(void)
time_t time(time_t *)
char *ctime(const time_t *)
struct tm *gmtime(const time_t *)
struct tm *localtime(const time_t *)
__sighandler_t *signal(int, __sighandler_t *)
char *strtok (char * str, const char * sep)
int gettimeofday(struct timeval * restrict, struct timezone * restrict)
int printf(const char *restrict, ...)
int puts(const char *)
int putchar(int)
int fflush(FILE *)
int scanf(const char *restrict, ...)
FILE * __stdio_getstdout(void)
FILE * __stdio_getstderr(void)
int fprintf(FILE *restrict, const char *restrict, ...)
size_t fwrite(const void *restrict, size_t, size_t, FILE *restrict)
int remove(const char *)
.alias unlink
.function __posixc_remove
FILE *__posixc_fopen(const char *restrict, const char *restrict)
.alias fopen
int fclose(FILE *)
size_t fread(void *restrict, size_t, size_t, FILE *restrict)
int fseek(FILE *, long, int)
double drand48(void)
void srand48(long)
FILE *fdopen(int, const char *)
int ferror(FILE *)
int fgetc(FILE *)
.alias getc
int fputc(int, FILE *)
.alias putc
FILE * __stdio_getstdin(void)
int ungetc(int, FILE *)
void perror(const char *)
int *__stdc_geterrnoptr(void)
int fchmod(int fildes, mode_t mode)
int fchown(int fd, uid_t owner, gid_t group)
int fileno(FILE *)
char *getenv(const char *name)
int isatty(int fd)
int __posixc_lstat(const char * restrict path, struct stat * restrict sb)
int __posixc_stat(const char * restrict path, struct stat * restrict sb)
void rewind(FILE *)
char *strerror(int)
.function __posixc_strerror
int utime(const char *, const struct utimbuf *)
int system(const char *string)
char *fgets(char *restrict, int, FILE *restrict)
int fputs(const char *restrict, FILE *restrict)
int setvbuf(FILE *restrict, char *restrict, int, size_t)
int rename(const char *, const char *)
.function __posixc_rename
int putenv(const char *)
char *gets(char *)
long random(void)
void srandom(unsigned)
long ftell(FILE *)
int vfprintf(FILE *restrict, const char *restrict, va_list)
int vprintf(const char *restrict, va_list)
double erand48(unsigned short [3])
off_t __posixc_lseek(int filedes, off_t offset, int whence)
ssize_t read(int d, void *buf, size_t nbytes)
ssize_t write(int fd, const void *buf, size_t nbytes)
int usleep(useconds_t microseconds)
int feof(FILE *)
pid_t getpid(void)
void setbuf(FILE *restrict, char *restrict)
FILE *freopen(const char *restrict, const char *restrict, FILE *restrict)
int access(const char *path, int mode)
int chmod(const char *path, mode_t mode)
int closedir(DIR *dir)
int fscanf(FILE *restrict, const char *restrict, ...)
pid_t getppid(void)
int kill(pid_t, int)
DIR *opendir(const char *filename)
int pclose(FILE *)
FILE *popen(const char *, const char *)
int __posixc_fgetpos(FILE *restrict, fpos_t *restrict)
int __posixc_fsetpos(FILE *, const fpos_t *)
struct dirent *__posixc_readdir(DIR *dir)
char *getcwd(char *buf, size_t size)
int __posixc_set_environptr(char ***environptr)
char *asctime(const struct tm *)
int raise(int)
char *ctime_r(const time_t *, char *)
.skip 1
struct tm *localtime_r(const time_t *, struct tm *)
FILE *tmpfile(void)
int chdir(const char *path)
int __posixc_creat (const char * filename, int mode)
int chown(const char *path, uid_t owner, gid_t group)
int fchdir(int fd)
int mkdir(const char *path, mode_t mode)
int __posixc_fstat(int fd, struct stat *sb)
int dup(int oldfd)
int fcntl (int fd, int cmd, ...)
int mkstemp(char *)
int flock(int, int)
char *mktemp(char *)
int getfsstat (struct statfs *, long, int)
char *getpass(const char *)
int pipe(int filedes[2])
unsigned sleep(unsigned)
long int jrand48(unsigned short [3])
void lcong48(unsigned short [7])
long int lrand48(void)
long int nrand48(unsigned short [3])
unsigned short int *seed48(unsigned short [3])
int statfs(const char *, struct statfs *)
int uname(struct utsname *)
pid_t waitpid(pid_t, int *, int)
pid_t wait(int *)
int posix_memalign(void **, size_t, size_t)
int __posixc_alphasort(const struct dirent **a, const struct dirent **b)
int __posixc_scandir (const char *dir, struct dirent ***namelist, int (*select)(const struct dirent *), int (*compar)(const struct dirent **, const struct dirent **))
int regcomp(regex_t *restrict, const char *restrict, int)
size_t regerror(int, const regex_t *restrict, char *restrict, size_t)
int regexec(const regex_t *restrict, const char *restrict, size_t, regmatch_t [], int)
void regfree(regex_t *)
char *strndup(const char *, size_t)
int __progonly_nixmain(int (*main)(int argc, char *argv[]), int argc, char *argv[])
mode_t umask(mode_t numask)
void siglongjmp(sigjmp_buf, int)
int sigsetjmp(sigjmp_buf, int)
void clearerr(FILE *)
int rmdir(const char *path)
char *tempnam(const char *, const char *)
int ioctl(int, int, ...)
int dup2(int oldfd, int newfd)
int unsetenv(const char *)
void __progonly_abort(void)
int __progonly_atexit(void (*func)(void))
void __progonly_exit(int code)
void __progonly__Exit(int)
void __progonly_program_startup(jmp_buf exitjmp, int *errorptr)
void __progonly_program_end(void)
int __progonly_execl(const char *path, const char *arg, va_list args)
.skip 1
#int __progonly_execle(const char *path, const char *arg, ...)
int __progonly_execlp(const char *path, const char *arg, ...)
int __progonly_execv(const char *path, char *const argv[])
int __progonly_execve(const char *path, char *const argv[], char *const envp[])
int __progonly_execvp(const char *path, char *const argv[])
pid_t vfork(void)
int open(const char * filename, int flags, ...)
int close(int fd)
int ftruncate(int fd, off_t length)
ssize_t readlink(const char * restrict path, char * restrict buf, size_t bufsize)
off_t __posixc_ftello(FILE *)
int __posixc_fseeko(FILE *, off_t, int)
gid_t getegid(void)
uid_t geteuid(void)
gid_t getgid(void)
uid_t getuid(void)
int dirfd(DIR *dir)
struct group *getgrgid(gid_t)
struct group *getgrnam(const char *)
struct passwd *getpwnam(const char *)
struct passwd *getpwuid(uid_t)
int link(const char *name1, const char *name2)
int mknod(const char *path, mode_t mode, dev_t dev)
int symlink(const char *name1, const char *name2)
int utimes(const char *, const struct timeval [2])
int fsync(int fd)
int sigaction(int, const struct sigaction *, struct sigaction *)
int sigaddset(sigset_t *, int)
int sigemptyset(sigset_t *)
int sigismember(const sigset_t *, int)
int sigprocmask(int, const sigset_t *, sigset_t *)
int getc_unlocked(FILE *)
void rewinddir(DIR *dir)
void setgrent(void)
void setpwent(void)
int __stdc_mb_cur_max(void)
int getrlimit(int, struct rlimit *)
char *getlogin(void)
char *ttyname(int fd)
int setgid(gid_t gid)
int setuid(uid_t uid)
char *basename(char *)
int __get_default_file (int, long *)
int setrlimit(int, const struct rlimit *)
int getgroups(int gidsetlen, gid_t *gidset)
pid_t getpgrp(void)
int tcgetattr(int, struct termios *)
int tcsetattr(int, int, const struct termios *)
void endpwent(void)
struct passwd *getpwent(void)
FILE *fopen64(const char *restrict, const char *restrict)
int fstat64(int fd, struct stat64 *sb)
double lgamma(double)
.alias gamma
long double lgammal(long double)
.alias gammal
float lgammaf(float)
.alias gammaf
int *__stdc_getsigngamptr(void)
##end functionlist
