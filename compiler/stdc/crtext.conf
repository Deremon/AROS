##begin config
version 1.0
basename CrtExt
options peropenerbase
##end config

##begin cdef
#include <unistd.h>
#include <stdio.h>
#include <signal.h>
#include <time.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <utime.h>
#include <dirent.h>
##end cdef

##begin stubprivate
##end stubprivate

##begin cdefprivate
##end cdefprivate

##begin startup
##end startup

##begin functionlist
void __assert(const char * expr, const char * file, unsigned int line)
void abort(void)
int atexit(void (*func)(void))
void exit(int code)
void _Exit(int)
.alias _exit
int rand(void)
void srand(unsigned int seed)
void *calloc(size_t count, size_t size)
void free(void *memory)
void *malloc(size_t size)
void *malloc_align(size_t size, size_t alignment)
void *realloc(void *oldmem, size_t newsize)
void *realloc_nocopy(void *oldmem, size_t newsize)
char *strdup(const char *)
clock_t clock(void)
time_t time(time_t *)
char *ctime(const time_t *)
struct tm *gmtime(const time_t *)
struct tm *localtime(const time_t *)
__sighandler_t *signal(int, __sighandler_t *)
char *strtok (char * str, const char * sep)
int gettimeofday(struct timeval * restrict, struct timezone * restrict)
int printf(const char *restrict, ...)
int puts(const char *)
int putchar(int)
int fflush(FILE *)
int scanf(const char *restrict, ...)
FILE * __stdio_getstdout(void)
FILE * __stdio_getstderr(void)
int fprintf(FILE *restrict, const char *restrict, ...)
size_t fwrite(const void *restrict, size_t, size_t, FILE *restrict)
int remove(const char *)
.alias unlink
FILE *__posixc_fopen(const char *restrict, const char *restrict)
int fclose(FILE *)
size_t fread(void *restrict, size_t, size_t, FILE *restrict)
int fseek(FILE *, long, int)
double drand48(void)
void srand48(long)
FILE *fdopen(int, const char *)
int ferror(FILE *)
int fgetc(FILE *)
.alias getc
int fputc(int, FILE *)
.alias putc
FILE * __stdio_getstdin(void)
int ungetc(int, FILE *)
void perror(const char *)
int *__stdc_geterrnoptr(void)
int fchmod(int fildes, mode_t mode)
int fchown(int fd, uid_t owner, gid_t group)
int fileno(FILE *)
char *getenv(const char *name)
int isatty(int fd)
int __posixc_lstat(const char * restrict path, struct stat * restrict sb)
int __posixc_stat(const char * restrict path, struct stat * restrict sb)
void rewind(FILE *)
char *strerror(int)
int utime(const char *, const struct utimbuf *)
int system(const char *string)
char *fgets(char *restrict, int, FILE *restrict)
int fputs(const char *restrict, FILE *restrict)
int setvbuf(FILE *restrict, char *restrict, int, size_t)
int rename(const char *, const char *)
int putenv(const char *)
char *gets(char *)
long random(void)
void srandom(unsigned)
long ftell(FILE *)
int vfprintf(FILE *restrict, const char *restrict, va_list)
int vprintf(const char *restrict, va_list)
double erand48(unsigned short [3])
off_t __posixc_lseek(int filedes, off_t offset, int whence)
ssize_t read(int d, void *buf, size_t nbytes)
ssize_t write(int fd, const void *buf, size_t nbytes)
int usleep(useconds_t microseconds)
int feof(FILE *)
pid_t getpid(void)
void setbuf(FILE *restrict, char *restrict)
FILE *freopen(const char *restrict, const char *restrict, FILE *restrict)
int access(const char *path, int mode)
int chmod(const char *path, mode_t mode)
int closedir(DIR *dir)
int fscanf(FILE *restrict, const char *restrict, ...)
pid_t getppid(void)
int kill(pid_t, int)
DIR *opendir(const char *filename)
int pclose(FILE *)
FILE *popen(const char *, const char *)
int __posixc_fgetpos(FILE *restrict, fpos_t *restrict)
int __posixc_fsetpos(FILE *, const fpos_t *)
struct dirent *__posixc_readdir(DIR *dir)
char *getcwd(char *buf, size_t size)
##end functionlist
